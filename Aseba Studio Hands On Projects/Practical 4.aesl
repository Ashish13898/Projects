<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<constant name="AVOID_LINE_SPEED" value="800"/>
<constant name="AVOID_OBSTACLE_DISTANCE" value="2700"/>
<constant name="EXPLORE" value="1"/>
<constant name="FORCED_EXPLORE_TIMER" value="6000"/>
<constant name="HIGHSPEED" value="500"/>
<constant name="INNER_THRESHOLD" value="550"/>
<constant name="LINE_AVOID" value="3"/>
<constant name="LINE_FOLLOW" value="2"/>
<constant name="LOWSPEED" value="180"/>
<constant name="OBSTACLE_AVOID_TIMER" value="1000"/>
<constant name="OBSTACLE_ENCOUNTERED" value="4"/>
<constant name="OUTER_THRESHOLD" value="165"/>
<constant name="STOP" value="0"/>
<constant name="TURN_AMOUNT" value="450"/>
<constant name="TURN_LEFT_TIMER" value="70"/>
<constant name="WHITE_LINE_THRESHOLD" value="930"/>


<!--node Rob1 on LAPTOP-DUTB06OF - 3536-->
<node nodeId="{1e977d7c-0819-435c-9a29-4a508afeaf9e}" name="Rob1 on LAPTOP-DUTB06OF - 3536"><![CDATA[# Ashish Dave (20000508) and Selime Keskin (14164250), V1, 15th December,2020
# Robotics Coursework Program CW2
# Thymio will wander, avoiding obstacles, while keeping within the Black Line
# Following the Blue Line and avoiding the other robot and obstacles
# The Forward button will make the robot start exploring the Arena
# The Center button will make the robot stop 

###########################################################################

# Constants:
# INNER_THRESHOLD = Line sensor Blue Line threshold
# OUTER_THRESHOLD = Line sensor Black lLne threshold
# WHITE_LINE_THRESHOLD = Threshold for white area
# HIGHSPEED = Highest Robot speed
# LOWSPEED = Lowest Robot speed
# TURN_AMOUNT = When turning, time to switch back to wandering
# AVOID_OBSTACLE_DISTANCE = Distance to obstacle to avoid. Inversely proportional
# AVOID_LINE_SPEED = When the robot is moving away from black line, this speed is used to make it go faster in other direction 

# TIMER Constants:
# OBSTACLE_AVOID_TIMER = Time to avoid the obstacle and call the timer
# TURN_LEFT_TIMER = Time required to make the robot turn left
# FORCED_EXPLORE_TIMER = Used to call the timer to check if robot is lost while following line or not

###########################################################################

# Robot behaviors, set as Constants to make program more readable:
# STOP
# EXPLORE
# LINE_FOLLOW
# LINE_AVOID
# OBSTACLE_ENCOUNTERED

############################################################################
# Variables

# Initialise Behaviour
var state = STOP # Start off with robot Stopped
# Global variables
var firstTime_Left = 0 #Used for making the robot go left while following the line first time
var detectObstacleSensor #Used for detecting the sensor for obstacles
var previous_State = STOP #Used for remembering the previous state of the robot to decide the future state
var i = 0 # Index to arrays
var forceSwitch_To_Explore = 0

############################################################################
##EVENTS


onevent button.forward
			# if forward button pressed,Set the state to Explore and Speed up the robot
			when button.forward == 1 do # Only react to new button presses
				
				state = EXPLORE #setting the state to explore for the first time
				callsub Forward
			
			end
return

onevent button.center
			# If forward button pressed,Set the state to Stop and stop the robot from moving
			when button.center == 1 do # Only react to new button presses
				
				state = STOP 
				callsub Stop
			
			end
return
			
onevent prox
			# Front distance sensor data - get nearest reading (maximum)
			detectObstacleSensor = prox.horizontal[0]
			for i in 1:4 do
				if prox.horizontal[i] > detectObstacleSensor then #Check the maximum value of the horizontal
					detectObstacleSensor = prox.horizontal[i]
				end
			end
			
			call leds.top(0,0,0)
			
			#While exploring or following the blue line 
			if  state == EXPLORE or  state ==  LINE_FOLLOW then
					callsub Follow_Line
					callsub Avoid_Obstacles
					callsub Avoid_Line
			end
			
			#If robot is avoiding the line and detect the line or while avoiding the obstacle detects the outer line call this funcation
			if  state ==  LINE_AVOID or state == OBSTACLE_ENCOUNTERED  then
					callsub Avoid_Line
			end
			
			#Different colors indicates the state of the robot
		    if state == EXPLORE then
		    		call leds.top(32,0,32)
		    
		    elseif state == LINE_AVOID then
		         call leds.top(32,0,0)
		    
		    elseif state == LINE_FOLLOW then
		    	   call leds.top(0,0,32)
		    
		    elseif state == OBSTACLE_ENCOUNTERED then
		    	   call leds.top(32,0,32)
		    end
	    
return
 
 
############################################################################
## TIMERS

onevent timer0
	 		  timer.period[0]=0	
		 	  if  state == LINE_AVOID then
				 		  	callsub Forward
				 		  	state = EXPLORE #After sucessfully avoding the line move back to exploring
		 	
		 	  elseif state == OBSTACLE_ENCOUNTERED then 
				 			#Lowing the highestspeed and increasing the lowspeed to make the avoiding behaviour go smoothly
							motor.right.target = HIGHSPEED - 100
							motor.left.target = LOWSPEED + 50
							
							#Getting the previous state if it's Line Follow then move back to line following else in the case of Explore set up both speed to high
							state = previous_State
							previous_State = OBSTACLE_ENCOUNTERED #setting the previous_state so it will not set the wrong values
							forceSwitch_To_Explore = 0
							if state == EXPLORE then
									callsub Forward #Explore the Arena
									# Setting this to zero again so next time when it encounters the blue line it will go left
									firstTime_Left = 0
							end
						
				elseif state == LINE_FOLLOW then
							if forceSwitch_To_Explore == 0 then
										#to make sure the robot always turn left for the first time, set up the firstTime_Left to true 
										motor.left.target = LOWSPEED - 80 #Lowing the speed to make the robot follow the left time smoothly
										motor.right.target = HIGHSPEED	
										timer.period[1] = 630 #After 630 ms set up firstTime_Left to 1
							
							#To check if robot is out of the line and state is Line Following for more then 60 seconds			
							elseif forceSwitch_To_Explore == 2  then
										#Threshold should be greater then white line to prove it's not on line
										if prox.ground.delta[1] > WHITE_LINE_THRESHOLD 
										and prox.ground.delta[0] > WHITE_LINE_THRESHOLD  and state == LINE_FOLLOW
									    then	
									    			#Forcefully changing the state
													forceSwitch_To_Explore = EXPLORE
													callsub Follow_Line
										end
							end
						
		 	
		 		end 
return

onevent timer1
				timer.period[1]=0
				if state == LINE_FOLLOW then
						firstTime_Left = 1
				end
return	

############################################################################
## SUBROUTNIES

sub Follow_Line
				#Make sure the threshold values are lower then the outer threshold and lower then the inner threshold 
				if (prox.ground.delta[0] > OUTER_THRESHOLD and  prox.ground.delta[1] > OUTER_THRESHOLD)  
				then
						if prox.ground.delta[1] < INNER_THRESHOLD or prox.ground.delta[0] < INNER_THRESHOLD 
						then
										forceSwitch_To_Explore = 0
										
										#check if this is the first time robot encoutering the Blue Line then go left
										if firstTime_Left == 0  and state != LINE_FOLLOW 
										then
											 	state = LINE_FOLLOW
										 		timer.period[0] = TURN_LEFT_TIMER #why 70? to give some time for the robot that's inside the oval to get on the threshold value of the line
										 end
									
										#If firstTime_Left is already 1 then check the sensors and move accordingly
										if firstTime_Left == 1 
										then
												state = LINE_FOLLOW
											 	#if the value is greater then the inner threashould value then follow line
												if prox.ground.delta[1] < INNER_THRESHOLD then
															  callsub TurnLeft #Turn Left
												
												elseif prox.ground.delta[0] < INNER_THRESHOLD
												then
															  callsub TurnRight #Turn Right
														 
												end
										end
						end
						#Check if the robot is in line following stage and not following the line
						if prox.ground.delta[1] > WHITE_LINE_THRESHOLD 
						and prox.ground.delta[0] > WHITE_LINE_THRESHOLD  and state == LINE_FOLLOW
					    then
										if forceSwitch_To_Explore == 0
										then
												#Using forceSwitch_To_Explore we'll distinguish robot's behaviour 
												 forceSwitch_To_Explore = LINE_FOLLOW
												 timer.period[0] = FORCED_EXPLORE_TIMER	#set timer to 60sec
															
										elseif forceSwitch_To_Explore == EXPLORE
										then
												#State change 
												state = forceSwitch_To_Explore
												callsub Forward	#Go forward
										end
										
						end	
				end
return

sub Avoid_Line
				#Check the threshold values if they are below outer threshold change the state
			   if prox.ground.delta[0] < OUTER_THRESHOLD or 
						prox.ground.delta[1] < OUTER_THRESHOLD 
			   then
			   				#Change the state to Line Avoid
							state = LINE_AVOID	
													
							#Check the outer threshold to make sure the robot is on the outer line
							if prox.ground.delta[0] < OUTER_THRESHOLD 
							then
											# Left sensor, turn right
											motor.left.target = AVOID_LINE_SPEED
											motor.right.target = -AVOID_LINE_SPEED
											timer.period[0] = TURN_AMOUNT
							
							#Check the outer threshold to make sure the robot is on the outer line					
							elseif prox.ground.delta[1] < OUTER_THRESHOLD   
							then			
											# Right sensor, turn left
											motor.left.target = -AVOID_LINE_SPEED
											motor.right.target = AVOID_LINE_SPEED
											timer.period[0] = TURN_AMOUNT - 30 #-30 to make the robot exact go to the opposite direction
											
						   end	   
				end
return

sub Avoid_Obstacles
				#if the robot is not near the borders of the area (check this by the threshold value of outer line) and sensor is not zero that means there is obstacle nearby							
				if ( prox.ground.delta[0] > OUTER_THRESHOLD and prox.ground.delta[1] > OUTER_THRESHOLD) and
					(detectObstacleSensor > AVOID_OBSTACLE_DISTANCE)
			   then
			   				 previous_State = state #Store the state to use it for the next upcoming states
							 state = OBSTACLE_ENCOUNTERED
							 timer.period[0] = OBSTACLE_AVOID_TIMER
							 #Toggling the speeds to get the best behaviour for avoding the Line
							 motor.left.target =  HIGHSPEED - 50 
							 motor.right.target = LOWSPEED - 65
							 
				end
return 

#Speed Functions 
sub TurnLeft
				#To make the robot turn towards left
				motor.left.target = HIGHSPEED
		 		motor.right.target = LOWSPEED	
		 
return

sub TurnRight
				#To make the robot turn towards right
				motor.left.target = LOWSPEED
		 		motor.right.target = HIGHSPEED
		 
return

sub Forward
				#To make the robot go forward
				motor.left.target = HIGHSPEED
				motor.right.target = HIGHSPEED
return

sub Stop
				#To Stop the robot from moving
				motor.left.target = 0
				motor.right.target = 0
return]]></node>


</network>
